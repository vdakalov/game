(function() {
  var packets;

  packets = {};

  window.inject = function(dependencies, handler) {
    var list;
    list = [];
    (dependencies || []).forEach(function(name) {
      if (name in packets) {
        return list.push(packets[name]);
      }
    });
    return handler.apply(this, list);
  };

  window.di = function(name, injecting, handler) {
    var _ref;
    _ref = arguments.length === 2 ? [name, [], injecting] : arguments, name = _ref[0], injecting = _ref[1], handler = _ref[2];
    if (injecting.length) {
      handler = inject(injecting, handler);
    }
    return packets[name] = handler;
  };

}).call(this);
(function() {
  di("utils", {
    each: function(obj, context, handler) {
      var index, item, name, _ref, _ref1;
      index = 0;
      if (arguments.length === 1) {
        _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
      }
      if (arguments.length === 2) {
        _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
      }
      if (typeof obj === 'object' && obj !== null && typeof handler === 'function') {
        for (name in obj) {
          item = obj[name];
          if (obj.hasOwnProperty(name) && (name !== 'length' || !(obj instanceof Array))) {
            if (context) {
              handler.call(context, item, name, index++);
            } else {
              handler(item, name, index++);
            }
          }
        }
      }
      return obj;
    },
    grep: function(obj, context, handler) {
      var isArr, list, _ref, _ref1;
      if (arguments.length === 1) {
        _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
      }
      if (arguments.length === 2) {
        _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
      }
      isArr = obj instanceof Array;
      list = isArr ? [] : {};
      this.each(obj, context, function(value, key, index) {
        if (handler.call(context, value, key, index) !== false) {
          if (isArr) {
            return list.push(value);
          } else {
            return list[key] = value;
          }
        }
      });
      return list;
    },
    collect: function(obj, context, handler) {
      var isArr, list, _ref, _ref1;
      if (arguments.length === 1) {
        _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
      }
      if (arguments.length === 2) {
        _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
      }
      isArr = obj instanceof Array;
      list = isArr ? [] : {};
      this.each(obj, context, function(value, key, index) {
        var result;
        result = context ? handler.call(context, value, key, index) : handler(value, key, index);
        if (result !== false) {
          return list[key] = result;
        }
      });
      return list;
    },
    collectEntries: function(obj, context, handler) {
      var list, _ref, _ref1;
      if (arguments.length === 1) {
        _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
      }
      if (arguments.length === 2) {
        _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
      }
      list = {};
      this.each(obj, context, function(value, key, index) {
        var result;
        result = context ? handler.call(context, value, key, index) : handler(value, key, index);
        if (result !== false) {
          return list[result[0]] = result[1];
        }
      });
      return list;
    },
    repeat: function(num, context, handler) {
      var _ref;
      if (arguments.length === 2) {
        _ref = [context, null], handler = _ref[0], context = _ref[1];
      }
      return this.each((new Array(num)).join(".").split(/.?/), context, function(value, key, index) {
        if (context) {
          return handler.call(context, index);
        } else {
          return handler(index);
        }
      });
    },
    trim: function(string) {
      return string.replace(/^\s*|\s*$/g, '');
    },
    interval: function(delay, handler) {
      return setInterval(handler, delay);
    },
    timeout: function(delay, handler) {
      return setTimeout(handler, delay);
    }
  });

}).call(this);
(function() {
  di("el", ["utils"], function(utils) {
    return {
      isEl: function(el) {
        return el instanceof HTMLElement;
      },
      get: document.querySelector.bind(document),
      getAll: document.querySelectorAll.bind(document),
      make: function(tagName, attrs, body, parent) {
        var el;
        el = this.isEl(tagName) ? tagName : document.createElement(tagName);
        utils.each(attrs || {}, function(value, key) {
          return el.setAttribute(key, value);
        });
        if (typeof body === "string") {
          el.innerHTML = body;
        }
        if (this.isEl(parent)) {
          parent.appendChild(el);
        }
        return el;
      },
      style: function(el, style) {
        return el.style[style];
      },
      styles: function(el, rules) {
        return utils.each(rules, this, function(value, rule) {
          return el.style[rule] = value;
        });
      },
      "class": function(el, className, turn) {
        new RegExp(className).test(el.className);
        if (arguments.length > 2) {
          el.className = trim(el.className.replace(new RegExp("(^|\s)" + className + "($|\s)"), " "));
          if (turn === true) {
            return el.className = trim("" + el.className + " " + className);
          }
        } else {
          return new RegExp(className).test(el.className);
        }
      }
    };
  });

}).call(this);
(function() {
  di("BasePixel", ["el"], function(el) {
    var BasePixel;
    return BasePixel = (function() {
      function BasePixel() {}

      BasePixel.prototype.make = function() {
        return this.el = el.make(this.tagName);
      };

      BasePixel.prototype.active = function(turn) {
        return el["class"](this.el, this.className, turn);
      };

      BasePixel.prototype.isActive = function() {
        return el["class"](this.el, this.className);
      };

      return BasePixel;

    })();
  });

}).call(this);
(function() {
  di("DefaultPixel", ["el", "BasePixel"], function(el, BasePixel) {
    var DefaultPixel;
    return DefaultPixel = (function() {
      DefaultPixel.prototype = new BasePixel;

      DefaultPixel.prototype.tagName = "div";

      DefaultPixel.prototype.activeName = "active";

      function DefaultPixel(x, y) {
        this.x = x;
        this.y = y;
        this.make();
      }

      return DefaultPixel;

    })();
  });

}).call(this);
(function() {
  di("LiquidCrystal", ["DefaultPixel", "utils", "el"], function(DefaultPixel, utils, el) {
    var LiquidCrystal, coord2index, index2coord;
    coord2index = function(width, x, y) {
      return ((y - 1) * width) + x;
    };
    index2coord = function(width, index) {
      return [width % index, (width / index >> 0) + 1];
    };
    return LiquidCrystal = (function() {
      var defaultOptions;

      LiquidCrystal.prototype = new Array;

      defaultOptions = {
        pixelSize: 5
      };

      function LiquidCrystal(width, height, options) {
        this.width = width;
        this.height = height;
        this.options = options != null ? options : defaultOptions;
        utils.repeat(this.width * this.height, this, function(index) {
          var coord;
          coord = index2coord(this.width, index);
          return this.push(new DefaultPixel(coord[0], coord[1]));
        });
      }

      LiquidCrystal.prototype.mount = function(parent) {
        var fragment;
        el.styles(parent, {
          width: "" + (this.options.pixelSize * this.width) + "px",
          height: "" + (this.options.pixelSize * this.height) + "px"
        });
        fragment = document.createDocumentFragment();
        utils.each(this, function(pixel) {
          if (pixel instanceof DefaultPixel) {
            return fragment.appendChild(pixel.el);
          }
        });
        return parent.appendChild(fragment);
      };

      LiquidCrystal.prototype.clear = function() {
        return utils.each(this, function(pixel) {
          return pixel.active(false);
        });
      };

      LiquidCrystal.prototype.setPixel = function(x, y) {
        var index;
        index = coord2index(this.width, x, y);
        if (index in this) {
          return this[index].active(true);
        }
      };

      return LiquidCrystal;

    })();
  });

}).call(this);
(function() {
  var Display, Symbol;

  Symbol = (function() {
    function Symbol(name, size, hexMask) {
      var mask;
      this.name = name;
      this.size = size;
      mask = parseInt(hexMask, 16).toString(2);
      mask = new Array((Math.ceil(mask.length / this.size) * this.size) + 1).join(0).replace(new RegExp("\\d{0," + mask.length + "}$"), mask).split(/\0?/);
      mask = collect(mask, function(item) {
        return +item;
      });
      this.mask = mask;
    }

    return Symbol;

  })();

  Display = (function() {
    var cursorPosition, display_size, modes, pixel_size;

    pixel_size = {
      width: 10,
      height: 10
    };

    display_size = {
      width: null,
      height: null
    };

    cursorPosition = {
      x: 0,
      y: 0
    };

    modes = {
      byDefault: "clipped",
      clipped: function(symbol, index) {
        return {
          x: cursorPosition.x + (index % symbol.size),
          y: cursorPosition.y + (index / symbol.size >> 0)
        };
      },
      mirror: function(symbol, index) {
        return {
          x: (cursorPosition.x + (index % symbol.size)) % display_size.width,
          y: (cursorPosition.y + (index / symbol.size >> 0)) % display_size.height
        };
      }
    };

    function Display(canvas, width, height, mode) {
      this.canvas = canvas;
      this.mode = mode != null ? mode : modes.byDefault;
      display_size = {
        width: width,
        height: height
      };
      this.liquidCrystal = new LiquidCrystal(width, height);
      this.liquidCrystal.mount(canvas);
      el.styles(canvas, {
        width: "" + (width * (pixel_size.width + 1)) + "px",
        height: "" + (height * (pixel_size.height + 1)) + "px"
      });
    }

    Display.prototype.clear = function() {
      return this.liquidCrystal.clear();
    };

    Display.prototype.setCursor = function(x, y) {
      cursorPosition.x = x;
      return cursorPosition.y = y;
    };

    Display.prototype.getCursor = function() {
      return cursorPosition;
    };

    Display.prototype.printSymbol = function(symbol) {
      if (symbol instanceof Symbol) {
        each(symbol.mask, this, function(bit, key, index) {
          var pos;
          if (bit === 1) {
            pos = modes[this.mode](symbol, index);
            return this.liquidCrystal.setPixel(pos.x, pos.y);
          }
        });
      }
      return void 0;
    };

    return Display;

  })();

  window.Symbol = Symbol;

  window.Display = Display;

}).call(this);
(function() {
  var Editor,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Editor = (function() {
    var currentMap, currentMask, currentSize, handler, max_x, max_y, min_x, min_y;

    currentSize = 0;

    currentMap = [];

    currentMask = "";

    min_x = 0;

    min_y = 0;

    max_x = 0;

    max_y = 0;

    handler = function(index, event) {
      var exist, _el;
      _el = event.target;
      if (_el.parentNode === this.canvas) {
        exist = __indexOf.call(currentMap, index) >= 0 === true;
        if (exist) {
          currentMap.splice(currentMap.indexOf(index), 1);
        } else {
          currentMap.push(index);
        }
        el["class"](_el, "select", !exist);
        return console.info(currentMap);
      }
    };

    function Editor(display) {
      this.display = display;
      this.width = this.display.liquidCrystal.width;
      this.height = this.display.liquidCrystal.height;
      this.canvas = this.display.canvas;
      min_x = this.width;
      min_y = this.height;
      el["class"](this.canvas, "edit", true);
      each(this.canvas.children, this, function(child, key, index) {
        if (el.isEl(child)) {
          return child.addEventListener("click", handler.bind(this, index), false);
        }
      });
      el.make("div", null, "Build", document.body).addEventListener("click", (function(_this) {
        return function() {
          var normalMap;
          each(currentMap, _this, function(num) {
            var x;
            x = num % this.width;
            if (x < min_x) {
              min_x = x;
            }
            if (x > max_x) {
              return max_x = x;
            }
          });
          currentSize = (max_x - min_x) + 1;
          normalMap = [];
          each(currentMap, _this, function(index) {
            var pos, x, y;
            x = index % this.width;
            y = index / this.width >> 0;
            if (y < min_y) {
              min_y = y;
            }
            if (y > max_y) {
              max_y = y;
            }
            pos = (y * currentSize) + (x + 1);
            return normalMap[pos - 1] = 1;
          });
          repeat(currentSize * (max_y + 1), function(index) {
            return normalMap[index] = normalMap[index] === 1 ? 1 : 0;
          });
          return prompt("Copy map", parseInt(normalMap.join(""), 2).toString(16));
        };
      })(this));
    }

    return Editor;

  })();

  window.Editor = Editor;

}).call(this);
(function() {
  inject(["el", "utils", "LiquidCrystal"], function(el, utils, LiquidCrystal) {
    var lc;
    lc = new LiquidCrystal(80, 16);
    return lc.mount(el.get("#canvas"));
  });

}).call(this);
(function() {
  var Motion, Motions;

  Motion = (function() {
    function Motion(symbols, from, speed, infinitely) {
      this.symbols = symbols;
      this.from = from;
      this.speed = speed;
      this.infinitely = infinitely != null ? infinitely : false;
      this.position = {
        x: this.from.x,
        y: this.from.y
      };
    }

    Motion.prototype.render = function(display) {
      if (display instanceof Display) {
        if (this.infinitely || (this.position.x >= this.to.x && this.position.y >= this.to.y)) {
          this.position.x += this.speed.x;
          this.position.y += this.speed.y;
        }
        display.setCursor(this.position.x, this.position.y);
        return each(this.symbols, this, function(symbol) {
          display.printSymbol(symbol);
          return display.setCursor(this.position.x + symbol.size + 1, display.getCursor().y);
        });
      }
    };

    Motion.prototype.reset = function() {
      return this.position = {
        x: this.from.x,
        y: this.from.y
      };
    };

    return Motion;

  })();

  Motions = (function() {
    var frame_delay, frame_display, motions;

    frame_delay = null;

    frame_display = null;

    motions = [];

    function Motions(display, delay) {
      frame_delay = delay;
      frame_display = display;
    }

    Motions.prototype.motionRegister = function(motion) {
      if (motion instanceof Motion) {
        return motions.push(motion);
      }
    };

    Motions.prototype.start = function() {
      return this.time = interval(frame_delay, function() {
        frame_display.clear();
        return each(motions, function(motion) {
          return motion.render(display);
        });
      });
    };

    Motions.prototype.stop = function() {
      return clearInterval(this.time);
    };

    return Motions;

  })();

  window.Motions = Motions;

  window.Motion = Motion;

}).call(this);
