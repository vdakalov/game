(function() {
  window.each = function(obj, context, handler) {
    var index, item, name, _ref, _ref1;
    index = 0;
    if (arguments.length === 1) {
      _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
    }
    if (arguments.length === 2) {
      _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
    }
    if (typeof obj === 'object' && obj !== null && typeof handler === 'function') {
      for (name in obj) {
        item = obj[name];
        if (obj.hasOwnProperty(name) && (name !== 'length' || !(obj instanceof Array))) {
          if (context) {
            handler.call(context, item, name, index++);
          } else {
            handler(item, name, index++);
          }
        }
      }
    }
    return obj;
  };

  window.grep = function(obj, context, handler) {
    var isArr, list, _ref, _ref1;
    if (arguments.length === 1) {
      _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
    }
    if (arguments.length === 2) {
      _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
    }
    isArr = obj instanceof Array;
    list = isArr ? [] : {};
    each(obj, context, function(value, key, index) {
      if (handler.call(context, value, key, index) !== false) {
        if (isArr) {
          return list.push(value);
        } else {
          return list[key] = value;
        }
      }
    });
    return list;
  };

  window.collect = function(obj, context, handler) {
    var isArr, list, _ref, _ref1;
    if (arguments.length === 1) {
      _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
    }
    if (arguments.length === 2) {
      _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
    }
    isArr = obj instanceof Array;
    list = isArr ? [] : {};
    each(obj, context, function(value, key, index) {
      var result;
      result = context ? handler.call(context, value, key, index) : handler(value, key, index);
      if (result !== false) {
        return list[key] = result;
      }
    });
    return list;
  };

  window.collectEntries = function(obj, context, handler) {
    var list, _ref, _ref1;
    if (arguments.length === 1) {
      _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
    }
    if (arguments.length === 2) {
      _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
    }
    list = {};
    each(obj, context, function(value, key, index) {
      var result;
      result = context ? handler.call(context, value, key, index) : handler(value, key, index);
      if (result !== false) {
        return list[result[0]] = result[1];
      }
    });
    return list;
  };

  window.repeat = function(num, context, handler) {
    var _ref;
    if (arguments.length === 2) {
      _ref = [context, null], handler = _ref[0], context = _ref[1];
    }
    return each((new Array(num)).join(".").split(/.?/), context, function(value, key, index) {
      if (context) {
        return handler.call(context, index);
      } else {
        return handler(index);
      }
    });
  };

  window.trim = function(string) {
    return string.replace(/^\s*|\s*$/g, '');
  };

  window.interval = function(delay, handler) {
    return setInterval(handler, delay);
  };

  window.timeout = function(delay, handler) {
    return setTimeout(handler, delay);
  };

}).call(this);
(function() {
  window.el = {
    isEl: function(el) {
      return el instanceof HTMLElement;
    },
    get: document.querySelector.bind(document),
    getAll: document.querySelectorAll.bind(document),
    make: function(tagName, attrs, body, parent) {
      var el;
      el = this.isEl(tagName) ? tagName : document.createElement(tagName);
      each(attrs || {}, function(value, key) {
        return el.setAttribute(key, value);
      });
      if (typeof body === "string") {
        el.innerHTML = body;
      }
      if (this.isEl(parent)) {
        parent.appendChild(el);
      }
      return el;
    },
    style: function(el, style) {
      return el.style[style];
    },
    styles: function(el, rules) {
      return each(rules, this, function(value, rule) {
        return el.style[rule] = value;
      });
    },
    "class": function(el, className, turn) {
      new RegExp(className).test(el.className);
      if (arguments.length > 2) {
        el.className = trim(el.className.replace(new RegExp("(^|\s)" + className + "($|\s)"), " "));
        if (turn === true) {
          return el.className = trim("" + el.className + " " + className);
        }
      } else {
        return new RegExp(className).test(el.className);
      }
    }
  };

}).call(this);
(function() {
  var Motion;

  Motion = (function() {
    var moveHandler;

    moveHandler = function() {
      this.display.clear();
      each(this.symbols, this, function(symbol) {
        this.display.printSymbol(symbol);
        return this.display.setCursor(this.position.x + symbol.size + 1, this.display.getCursor().y);
      });
      if (this.position.x >= this.to.x && this.position.y >= this.to.y) {
        clearInterval(this.time);
      }
      return this.display.setCursor(this.position.x += this.step.x, this.position.y += this.step.y);
    };

    function Motion(display, symbols, from, to, speed) {
      this.display = display;
      this.symbols = symbols;
      this.from = from;
      this.to = to;
      this.speed = speed;
      if (this.display instanceof Display) {
        this.relative = {
          x: Math.abs(this.to.x - this.from.x),
          y: Math.abs(this.to.y - this.from.y)
        };
        this.step = {
          x: this.relative.x > this.relative.y ? 1 : this.relative.x / this.relative.y,
          y: this.relative.y > this.relative.x ? 1 : this.relative.y / this.relative.x
        };
        this.position = {
          x: this.from.x,
          y: this.from.y
        };
      }
    }

    Motion.prototype.reset = function() {
      return this.position = {
        x: this.from.x,
        y: this.from.y
      };
    };

    Motion.prototype.move = function() {
      return this.time = interval(this.speed, moveHandler.bind(this));
    };

    Motion.prototype.stop = function() {
      return clearInterval(this.time);
    };

    return Motion;

  })();

  window.Motion = Motion;

}).call(this);
(function() {
  var Display, Symbol;

  Symbol = (function() {
    function Symbol(name, size, hexMask) {
      var mask;
      this.name = name;
      this.size = size;
      mask = parseInt(hexMask, 16).toString(2);
      mask = new Array(41).join(0).replace(new RegExp("\\d{0," + mask.length + "}$"), mask).split(/\0?/);
      mask = collect(mask, function(item) {
        return +item;
      });
      this.mask = mask;
    }

    return Symbol;

  })();

  Display = (function() {
    var cursorPosition, display_size, modes, pixel_size;

    pixel_size = {
      width: 5,
      height: 5
    };

    display_size = {
      width: null,
      height: null
    };

    cursorPosition = {
      x: 0,
      y: 0
    };

    modes = {
      byDefault: "clipped",
      clipped: function(symbol, index) {
        return {
          x: cursorPosition.x + (index % symbol.size),
          y: cursorPosition.y + (index / symbol.size >> 0)
        };
      },
      mirror: function(symbol, index) {
        return {
          x: (cursorPosition.x + (index % symbol.size)) % display_size.width,
          y: (cursorPosition.y + (index / symbol.size >> 0)) % display_size.height
        };
      }
    };

    function Display(canvas, width, height, mode) {
      this.mode = mode != null ? mode : modes.byDefault;
      display_size = {
        width: width,
        height: height
      };
      this.liquidCrystal = new LiquidCrystal(width, height);
      this.liquidCrystal.mount(canvas);
      el.styles(canvas, {
        width: "" + ((width * pixel_size.width) + 1) + "px",
        height: "" + ((height * pixel_size.height) + 1) + "px"
      });
    }

    Display.prototype.clear = function() {
      return this.liquidCrystal.clear();
    };

    Display.prototype.setCursor = function(x, y) {
      cursorPosition.x = x;
      return cursorPosition.y = y;
    };

    Display.prototype.getCursor = function() {
      return cursorPosition;
    };

    Display.prototype.printSymbol = function(symbol) {
      if (symbol instanceof Symbol) {
        each(symbol.mask, this, function(bit, key, index) {
          var pos;
          if (bit === 1) {
            pos = modes[this.mode](symbol, index);
            return this.liquidCrystal.setPixel(pos.x, pos.y);
          }
        });
      }
      return void 0;
    };

    return Display;

  })();

  window.Symbol = Symbol;

  window.Display = Display;

}).call(this);
(function() {
  var LiquidCrystal, Pixel;

  Pixel = (function() {
    var className, tagName;

    tagName = "div";

    className = "active";

    function Pixel(x, y) {
      this.x = x;
      this.y = y;
      this.el = el.make(tagName);
    }

    Pixel.prototype.active = function(turn) {
      el["class"](this.el, className, turn);
      return void 0;
    };

    Pixel.prototype.isActive = function() {
      return el["class"](this.el, className);
    };

    return Pixel;

  })();

  LiquidCrystal = (function() {
    var active_pixels, getKey, pixels;

    pixels = {};

    active_pixels = {};

    getKey = function(x, y) {
      return "x" + (x >> 0) + "y" + (y >> 0);
    };

    function LiquidCrystal(width, height) {
      this.width = width;
      this.height = height;
      repeat(this.width * this.height, this, function(index) {
        var key, x, y;
        x = index % this.width;
        y = index / this.width >> 0;
        key = getKey(x, y);
        return pixels[key] = new Pixel(x, y);
      });
    }

    LiquidCrystal.prototype.mount = function(parent) {
      var fragment;
      fragment = document.createDocumentFragment();
      each(pixels, function(pixel) {
        return fragment.appendChild(pixel.el);
      });
      return parent.appendChild(fragment);
    };

    LiquidCrystal.prototype.clear = function() {
      each(active_pixels, function(pixel) {
        return pixel.active(false);
      });
      active_pixels = {};
      return true;
    };

    LiquidCrystal.prototype.setPixel = function(x, y) {
      var key;
      key = getKey(x, y);
      if (key in pixels && !pixels[key].isActive()) {
        pixels[key].active(true);
        if (pixels[key].isActive()) {
          active_pixels[key] = pixels[key];
          return true;
        }
      }
      return false;
    };

    return LiquidCrystal;

  })();

  window.LiquidCrystal = LiquidCrystal;

}).call(this);
(function() {
  var display, motion, symbols;

  symbols = {
    A: new Symbol("A", 5, "22a318fe31"),
    B: new Symbol("B", 5, "f463e8c63e")
  };

  display = new Display(el.get("#canvas"), 80, 16, "mirror");

  motion = new Motion(display, symbols, {
    x: 0,
    y: 0
  }, {
    x: 100,
    y: 50
  }, 150);

  motion.move();

  window.display = display;

}).call(this);
