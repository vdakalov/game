(function() {
  var each, getInstance, parseOptions, scope;

  each = function(obj, context, handler) {
    return obj.forEach((handler || context).bind(context || this));
  };

  scope = {
    services: {},
    controllers: []
  };

  parseOptions = function(options) {
    var dependencies, name, _ref;
    _ref = options.split(/\s*:\s*/), name = _ref[0], dependencies = _ref[1];
    return [name, dependencies ? dependencies.split(/\s*,\s*/) : []];
  };

  getInstance = function(serviceName) {
    var deps, service;
    if (serviceName in scope.services) {
      service = scope.services[serviceName];
      deps = [];
      each(service.services, function(serviceName) {
        return deps.push(getInstance(serviceName));
      });
      return service.factory.apply(window, deps);
    }
  };


  /* REGISTER CONTROLLERS */

  window.controller = function(options, handler) {
    var name, services, _ref;
    _ref = parseOptions(options), name = _ref[0], services = _ref[1];
    return scope.controllers.push({
      name: name,
      services: services,
      handler: handler
    });
  };


  /* REGISTER SERVICES */

  window.service = function(options, factory) {
    var name, services, _ref;
    _ref = parseOptions(options), name = _ref[0], services = _ref[1];
    return scope["services"][name] = {
      services: services,
      factory: typeof factory === "function" ? factory : function() {
        return factory;
      }
    };
  };


  /* BOOTSTRAP */

  window.onload = function() {
    return each(scope.controllers, function(controller) {
      var deps;
      deps = [];
      each(controller.services, function(serviceName) {
        return deps.push(getInstance(serviceName));
      });
      return controller.handler.apply(window, deps);
    });
  };

}).call(this);
(function() {
  service("BinSymbol:Symbol", function(Symbol) {
    var BinSymbol;
    return BinSymbol = (function() {
      BinSymbol.prototype = new Symbol;

      function BinSymbol(name, mask) {
        this.name = name;
        this.mask = mask;
      }

      return BinSymbol;

    })();
  });

}).call(this);
(function() {
  service("Display:LiquidCrystal,RenderPreprocessor,Symbol,utils", function(LiquidCrystal, RenderPreprocessor, Symbol, utils) {
    var Display;
    return Display = (function() {
      var liquidCrystal, preprocesstor, setPixel;

      liquidCrystal = null;

      preprocesstor = null;

      setPixel = function(x, y) {
        var _ref;
        if (preprocesstor instanceof RenderPreprocessor) {
          _ref = preprocesstor.transform(x, y), x = _ref[0], y = _ref[1];
        }
        if (liquidCrystal instanceof LiquidCrystal) {
          return liquidCrystal.setPixel(x, y);
        }
      };

      function Display(canvas, width, height) {
        this.canvas = canvas;
        this.width = width;
        this.height = height;
      }

      Display.prototype.setPreprocessor = function(preprocessor) {
        if (preprocessor.prototype instanceof RenderPreprocessor) {
          return preprocesstor = new preprocessor(this.width, this.height);
        }
      };

      Display.prototype.setLiquidCrystal = function(lc) {
        if (lc.prototype instanceof LiquidCrystal) {
          liquidCrystal = new LiquidCrystal(this.width, this.height);
          return liquidCrystal.mount(this.canvas);
        }
      };

      Display.prototype.clear = function() {
        return liquidCrystal.clear();
      };

      Display.prototype.cursor = (function() {
        var position;
        position = [0, 0];
        return function(x, y) {
          var _ref;
          return _ref = [(x >= 0 ? x : position[0]), (y >= 0 ? y : position[1])], x = _ref[0], y = _ref[1], _ref;
        };
      })();

      Display.prototype.printSymbol = function(symbol) {
        if (symbol instanceof Symbol) {
          each(symbol.mask, this, function(bit, key, index) {
            if (bit === 1) {
              return setPixel.appy(this, utils.index2coord(this.width, index));
            }
          });
        }
        return void 0;
      };

      return Display;

    })();
  });

}).call(this);
(function() {
  service("HexSymbol:Symbol,utils", function(Symbol, utils) {
    var HexSymbol;
    return HexSymbol = (function() {
      var hex2bin;

      HexSymbol.prototype = new Symbol;

      hex2bin = function(size, mask) {
        var normalMask;
        mask = parseInt(mask).toString(2);
        normalMask = new Array((Math.ceil(mask.length / size) * size) + 1).join(0);
        mask = normalMask.replace(new RegExp("\\d{0," + mask.length + "}$"), mask).split(/\0?/);
        return this.mask = utils.collect(mask, function(bit) {
          return +bit;
        });
      };

      function HexSymbol(name, size, mask) {
        this.name = name;
        this.size = size;
        this.mask = hex2bin(this.size, mask);
      }

      return HexSymbol;

    })();
  });

}).call(this);
(function() {
  service("Symbol", function() {
    var Symbol;
    return Symbol = (function() {
      function Symbol() {}

      return Symbol;

    })();
  });

}).call(this);
(function() {
  var Editor,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Editor = (function() {
    var currentMap, currentMask, currentSize, handler, max_x, max_y, min_x, min_y;

    currentSize = 0;

    currentMap = [];

    currentMask = "";

    min_x = 0;

    min_y = 0;

    max_x = 0;

    max_y = 0;

    handler = function(index, event) {
      var exist, _el;
      _el = event.target;
      if (_el.parentNode === this.canvas) {
        exist = __indexOf.call(currentMap, index) >= 0 === true;
        if (exist) {
          currentMap.splice(currentMap.indexOf(index), 1);
        } else {
          currentMap.push(index);
        }
        el["class"](_el, "select", !exist);
        return console.info(currentMap);
      }
    };

    function Editor(display) {
      this.display = display;
      this.width = this.display.liquidCrystal.width;
      this.height = this.display.liquidCrystal.height;
      this.canvas = this.display.canvas;
      min_x = this.width;
      min_y = this.height;
      el["class"](this.canvas, "edit", true);
      each(this.canvas.children, this, function(child, key, index) {
        if (el.isEl(child)) {
          return child.addEventListener("click", handler.bind(this, index), false);
        }
      });
      el.make("div", null, "Build", document.body).addEventListener("click", (function(_this) {
        return function() {
          var normalMap;
          each(currentMap, _this, function(num) {
            var x;
            x = num % this.width;
            if (x < min_x) {
              min_x = x;
            }
            if (x > max_x) {
              return max_x = x;
            }
          });
          currentSize = (max_x - min_x) + 1;
          normalMap = [];
          each(currentMap, _this, function(index) {
            var pos, x, y;
            x = index % this.width;
            y = index / this.width >> 0;
            if (y < min_y) {
              min_y = y;
            }
            if (y > max_y) {
              max_y = y;
            }
            pos = (y * currentSize) + (x + 1);
            return normalMap[pos - 1] = 1;
          });
          repeat(currentSize * (max_y + 1), function(index) {
            return normalMap[index] = normalMap[index] === 1 ? 1 : 0;
          });
          return prompt("Copy map", parseInt(normalMap.join(""), 2).toString(16));
        };
      })(this));
    }

    return Editor;

  })();

  window.Editor = Editor;

}).call(this);
(function() {
  service("el:utils", function(utils) {
    return {
      isEl: function(el) {
        return el instanceof HTMLElement;
      },
      get: document.querySelector.bind(document),
      getAll: document.querySelectorAll.bind(document),
      make: function(tagName, attrs, body, parent) {
        var el;
        el = this.isEl(tagName) ? tagName : document.createElement(tagName);
        utils.each(attrs || {}, function(value, key) {
          return el.setAttribute(key, value);
        });
        if (typeof body === "string") {
          el.innerHTML = body;
        }
        if (this.isEl(parent)) {
          parent.appendChild(el);
        }
        return el;
      },
      style: function(el, style) {
        return el.style[style];
      },
      styles: function(el, rules) {
        return utils.each(rules, this, function(value, rule) {
          return el.style[rule] = value;
        });
      },
      "class": function(el, className, turn) {
        new RegExp(className).test(el.className);
        if (arguments.length > 2) {
          el.className = utils.trim(el.className.replace(new RegExp("(^|\s)" + className + "($|\s)"), " "));
          if (turn === true) {
            return el.className = utils.trim("" + el.className + " " + className);
          }
        } else {
          return new RegExp(className).test(el.className);
        }
      }
    };
  });

}).call(this);
(function() {
  service("utils", {
    each: function(obj, context, handler) {
      var index, item, name, _ref, _ref1;
      index = 0;
      if (arguments.length === 1) {
        _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
      }
      if (arguments.length === 2) {
        _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
      }
      if (typeof obj === 'object' && obj !== null && typeof handler === 'function') {
        for (name in obj) {
          item = obj[name];
          if (obj.hasOwnProperty(name) && (name !== 'length' || !(obj instanceof Array))) {
            if (context) {
              handler.call(context, item, name, index++);
            } else {
              handler(item, name, index++);
            }
          }
        }
      }
      return obj;
    },
    grep: function(obj, context, handler) {
      var isArr, list, _ref, _ref1;
      if (arguments.length === 1) {
        _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
      }
      if (arguments.length === 2) {
        _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
      }
      isArr = obj instanceof Array;
      list = isArr ? [] : {};
      this.each(obj, context, function(value, key, index) {
        if (handler.call(context, value, key, index) !== false) {
          if (isArr) {
            return list.push(value);
          } else {
            return list[key] = value;
          }
        }
      });
      return list;
    },
    collect: function(obj, context, handler) {
      var isArr, list, _ref, _ref1;
      if (arguments.length === 1) {
        _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
      }
      if (arguments.length === 2) {
        _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
      }
      isArr = obj instanceof Array;
      list = isArr ? [] : {};
      this.each(obj, context, function(value, key, index) {
        var result;
        result = context ? handler.call(context, value, key, index) : handler(value, key, index);
        if (result !== false) {
          return list[key] = result;
        }
      });
      return list;
    },
    collectEntries: function(obj, context, handler) {
      var list, _ref, _ref1;
      if (arguments.length === 1) {
        _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
      }
      if (arguments.length === 2) {
        _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
      }
      list = {};
      this.each(obj, context, function(value, key, index) {
        var result;
        result = context ? handler.call(context, value, key, index) : handler(value, key, index);
        if (result !== false) {
          return list[result[0]] = result[1];
        }
      });
      return list;
    },
    repeat: function(num, context, handler) {
      var _ref;
      if (arguments.length === 2) {
        _ref = [context, null], handler = _ref[0], context = _ref[1];
      }
      return this.each((new Array(num)).join(".").split(/.?/), context, function(value, key, index) {
        if (context) {
          return handler.call(context, index);
        } else {
          return handler(index);
        }
      });
    },
    trim: function(string) {
      return string.replace(/^\s*|\s*$/g, '');
    },
    interval: function(delay, handler) {
      return setInterval(handler, delay);
    },
    timeout: function(delay, handler) {
      return setTimeout(handler, delay);
    },
    coord2index: function(width, x, y) {
      return ((y - 1) * width) + x - 1;
    },
    index2coord: function(width, index) {
      return [width % index, (width / index >> 0) + 1];
    }
  });

}).call(this);
(function() {
  service("BasePixel:el", function(el) {
    var BasePixel;
    return BasePixel = (function() {
      function BasePixel() {}

      BasePixel.prototype.make = function() {
        return this.el = el.make(this.tagName);
      };

      BasePixel.prototype.active = function(turn) {
        return el["class"](this.el, this.className, turn);
      };

      BasePixel.prototype.isActive = function() {
        return el["class"](this.el, this.className);
      };

      return BasePixel;

    })();
  });

}).call(this);
(function() {
  service("DefaultPixel:el,BasePixel", function(el, BasePixel) {
    var DefaultPixel;
    return DefaultPixel = (function() {
      DefaultPixel.prototype = new BasePixel;

      DefaultPixel.prototype.tagName = "div";

      DefaultPixel.prototype.className = "active";

      function DefaultPixel(x, y) {
        this.x = x;
        this.y = y;
        this.make();
      }

      return DefaultPixel;

    })();
  });

}).call(this);
(function() {
  service("LiquidCrystal:DefaultPixel,BasePixel,utils,el", function(DefaultPixel, BasePixel, utils, el) {
    var LiquidCrystal;
    return LiquidCrystal = (function() {
      function LiquidCrystal() {}

      LiquidCrystal.prototype = new Array;

      LiquidCrystal.pixelSize = 1;

      LiquidCrystal.prototype.init = function(pixel) {
        if (pixel == null) {
          pixel = DefaultPixel;
        }
        if (pixel.prototype instanceof BasePixel) {
          return utils.repeat(this.width * this.height, this, function(index) {
            var coord;
            coord = utils.index2coord(this.width, index);
            return this.push(new pixel(coord[0], coord[1]));
          });
        }
      };

      LiquidCrystal.prototype.mount = function(parent) {
        var fragment;
        el.styles(parent, {
          width: "" + (this.pixelSize * this.width) + "px",
          height: "" + (this.pixelSize * this.height) + "px"
        });
        fragment = document.createDocumentFragment();
        utils.each(this, function(pixel) {
          if (pixel instanceof BasePixel) {
            return fragment.appendChild(pixel.el);
          }
        });
        return parent.appendChild(fragment);
      };

      LiquidCrystal.prototype.clear = function() {
        return utils.each(this, function(pixel) {
          return pixel.active(false);
        });
      };

      LiquidCrystal.prototype.setPixel = function(x, y) {
        var index;
        index = utils.coord2index(this.width, x, y);
        if (index in this) {
          return this[index].active(true);
        }
      };

      return LiquidCrystal;

    })();
  });

}).call(this);
(function() {
  controller("main:el,HexSymbol,Display", function(el, HexSymbol, Display) {
    var display, symbols;
    symbols = {
      A: new HexSymbol("A", 5, "22a318fe31"),
      B: new HexSymbol("B", 4, "f463e8c63e"),
      U: new HexSymbol("C", 5, "746108422e"),
      DOT: new HexSymbol("DOT", 2, "f")
    };
    display = new Display(el.get("#canvas"), 80, 16);
    display.printSymbol(symbols.A);
    return window.display = display;
  });

}).call(this);
(function() {
  var Motion, Motions;

  Motion = (function() {
    function Motion(symbols, from, speed, infinitely) {
      this.symbols = symbols;
      this.from = from;
      this.speed = speed;
      this.infinitely = infinitely != null ? infinitely : false;
      this.position = {
        x: this.from.x,
        y: this.from.y
      };
    }

    Motion.prototype.render = function(display) {
      if (display instanceof Display) {
        if (this.infinitely || (this.position.x >= this.to.x && this.position.y >= this.to.y)) {
          this.position.x += this.speed.x;
          this.position.y += this.speed.y;
        }
        display.setCursor(this.position.x, this.position.y);
        return each(this.symbols, this, function(symbol) {
          display.printSymbol(symbol);
          return display.setCursor(this.position.x + symbol.size + 1, display.getCursor().y);
        });
      }
    };

    Motion.prototype.reset = function() {
      return this.position = {
        x: this.from.x,
        y: this.from.y
      };
    };

    return Motion;

  })();

  Motions = (function() {
    var frame_delay, frame_display, motions;

    frame_delay = null;

    frame_display = null;

    motions = [];

    function Motions(display, delay) {
      frame_delay = delay;
      frame_display = display;
    }

    Motions.prototype.motionRegister = function(motion) {
      if (motion instanceof Motion) {
        return motions.push(motion);
      }
    };

    Motions.prototype.start = function() {
      return this.time = interval(frame_delay, function() {
        frame_display.clear();
        return each(motions, function(motion) {
          return motion.render(display);
        });
      });
    };

    Motions.prototype.stop = function() {
      return clearInterval(this.time);
    };

    return Motions;

  })();

  window.Motions = Motions;

  window.Motion = Motion;

}).call(this);
(function() {
  service("MT16S2H2FLA:LiquidCrystal", function(LiquidCrystal) {
    var MT16S2H2FLA;
    return MT16S2H2FLA = (function() {
      MT16S2H2FLA.prototype = new LiquidCrystal;

      MT16S2H2FLA.prototype.pixelSize = 5;

      function MT16S2H2FLA(width, height) {
        this.width = width;
        this.height = height;
        this.init();
      }

      return MT16S2H2FLA;

    })();
  });

}).call(this);
(function() {
  service("CloseRenderPreprocessor:RenderPreprocessor", function(RenderPreprocessor) {
    var CloseRenderPreprocessor;
    return CloseRenderPreprocessor = (function() {
      CloseRenderPreprocessor.prototype = new RenderPreprocessor;

      function CloseRenderPreprocessor(width, height) {
        this.width = width;
        this.height = height;
      }

      CloseRenderPreprocessor.prototype.transform = function(x, y) {
        return [x % this.width, y % this.height];
      };

      return CloseRenderPreprocessor;

    })();
  });

}).call(this);
(function() {
  service("CutRenderPreprocessor:RenderPreprocessor", function(RenderPreprocessor) {
    var CutRenderPreprocessor;
    return CutRenderPreprocessor = (function() {
      CutRenderPreprocessor.prototype = new RenderPreprocessor;

      function CutRenderPreprocessor(width, height) {
        this.width = width;
        this.height = height;
      }

      CutRenderPreprocessor.prototype.transform = function(x, y) {
        return [x, y];
      };

      return CutRenderPreprocessor;

    })();
  });

}).call(this);
(function() {
  var RenderPreprocessor;

  service("RenderPreprocessor", RenderPreprocessor = (function() {
    function RenderPreprocessor() {}

    return RenderPreprocessor;

  })());

}).call(this);
