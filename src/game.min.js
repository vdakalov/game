(function() {
  window.each = function(obj, context, handler) {
    var index, item, name, _ref, _ref1;
    index = 0;
    if (arguments.length === 1) {
      _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
    }
    if (arguments.length === 2) {
      _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
    }
    if (typeof obj === 'object' && obj !== null && typeof handler === 'function') {
      for (name in obj) {
        item = obj[name];
        if (obj.hasOwnProperty(name) && (name !== 'length' || !(obj instanceof Array))) {
          if (context) {
            handler.call(context, item, name, index++);
          } else {
            handler(item, name, index++);
          }
        }
      }
    }
    return obj;
  };

  window.grep = function(obj, context, handler) {
    var isArr, list, _ref, _ref1;
    if (arguments.length === 1) {
      _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
    }
    if (arguments.length === 2) {
      _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
    }
    isArr = obj instanceof Array;
    list = isArr ? [] : {};
    each(obj, context, function(value, key, index) {
      if (handler.call(context, value, key, index) !== false) {
        if (isArr) {
          return list.push(value);
        } else {
          return list[key] = value;
        }
      }
    });
    return list;
  };

  window.collect = function(obj, context, handler) {
    var isArr, list, _ref, _ref1;
    if (arguments.length === 1) {
      _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
    }
    if (arguments.length === 2) {
      _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
    }
    isArr = obj instanceof Array;
    list = isArr ? [] : {};
    each(obj, context, function(value, key, index) {
      var result;
      result = context ? handler.call(context, value, key, index) : handler(value, key, index);
      if (result !== false) {
        return list[key] = result;
      }
    });
    return list;
  };

  window.collectEntries = function(obj, context, handler) {
    var list, _ref, _ref1;
    if (arguments.length === 1) {
      _ref = [obj, this, null], handler = _ref[0], obj = _ref[1], context = _ref[2];
    }
    if (arguments.length === 2) {
      _ref1 = [context, null], handler = _ref1[0], context = _ref1[1];
    }
    list = {};
    each(obj, context, function(value, key, index) {
      var result;
      result = context ? handler.call(context, value, key, index) : handler(value, key, index);
      if (result !== false) {
        return list[result[0]] = result[1];
      }
    });
    return list;
  };

  window.repeat = function(num, context, handler) {
    var _ref;
    if (arguments.length === 2) {
      _ref = [context, null], handler = _ref[0], context = _ref[1];
    }
    return each((new Array(num)).join(".").split(/.?/), context, function(value, key, index) {
      if (context) {
        return handler.call(context, index);
      } else {
        return handler(index);
      }
    });
  };

  window.trim = function(string) {
    return string.replace(/^\s*|\s*$/g, '');
  };

}).call(this);
(function() {
  window.el = {
    isEl: function(el) {
      return el instanceof HTMLElement;
    },
    get: document.querySelector.bind(document),
    getAll: document.querySelectorAll.bind(document),
    make: function(tagName, attrs, body, parent) {
      var el;
      el = this.isEl(tagName) ? tagName : document.createElement(tagName);
      each(attrs || {}, function(value, key) {
        return el.setAttribute(key, value);
      });
      if (typeof body === "string") {
        el.innerHTML = body;
      }
      if (this.isEl(parent)) {
        parent.appendChild(el);
      }
      return el;
    },
    style: function(el, style) {
      return el.style[style];
    },
    styles: function(el, rules) {
      return each(rules, this, function(value, rule) {
        return el.style[rule] = value;
      });
    },
    "class": function(el, className, turn) {
      new RegExp(className).test(el.className);
      if (arguments.length > 2) {
        el.className = trim(el.className.replace(new RegExp("(^|\s)" + className + "($|\s)"), " "));
        if (turn === true) {
          return el.className = trim("" + el.className + " " + className);
        }
      } else {
        return new RegExp(className).test(el.className);
      }
    }
  };

}).call(this);
(function() {
  var Display;

  Display = (function() {
    var cursorPosition, display_size, pixel_size, symbols;

    pixel_size = {
      width: 5,
      height: 5
    };

    display_size = {
      width: null,
      height: null
    };

    cursorPosition = {
      x: 0,
      y: 0
    };

    symbols = {};

    function Display(canvas, width, height) {
      display_size = {
        width: width,
        height: height
      };
      this.liquidCrystal = new LiquidCrystal(width, height);
      this.liquidCrystal.mount(canvas);
      el.styles(canvas, {
        width: "" + ((width * pixel_size.width) + 1) + "px",
        height: "" + ((height * pixel_size.height) + 1) + "px"
      });
    }

    Display.prototype.setCursor = function(x, y) {
      if (x >= 0 && x <= display_size.width) {
        cursorPosition.x = x;
      }
      if (y >= 0 && y <= display_size.height) {
        return cursorPosition.y = y;
      }
    };

    Display.prototype.printSymbol = function(name) {
      var symbol;
      if (name in symbols) {
        symbol = symbols[name];
        each(symbol.map, this, function(bit, key, index) {
          if (bit === 1) {
            return this.liquidCrystal.setPixel(cursorPosition.x + (index % symbol.size), cursorPosition.y + (index / symbol.size >> 0));
          }
        });
      }
      return void 0;
    };

    Display.prototype.addSymbol = function(name, size, mask) {
      var map;
      map = parseInt(mask, 16).toString(2);
      map = new Array(41).join(0).replace(new RegExp("\\d{0," + map.length + "}$"), map).split(/\0?/);
      map = collect(map, function(item) {
        return +item;
      });
      return symbols[name] = {
        mask: mask,
        size: size,
        map: map
      };
    };

    Display.prototype.removeSymbol = function(name) {
      return delete symbols[name];
    };

    return Display;

  })();

  window.Display = Display;

}).call(this);
(function() {
  var LiquidCrystal, Pixel;

  Pixel = (function() {
    var className, tagName;

    tagName = "div";

    className = "active";

    function Pixel(x, y) {
      this.x = x;
      this.y = y;
      this.el = el.make(tagName);
    }

    Pixel.prototype.active = function(turn) {
      el["class"](this.el, className, turn);
      return void 0;
    };

    Pixel.prototype.isActive = function() {
      return el["class"](this.el, className);
    };

    return Pixel;

  })();

  LiquidCrystal = (function() {
    var active_pixels, getKey, pixels;

    pixels = {};

    active_pixels = {};

    getKey = function(x, y) {
      return "x" + x + "y" + y;
    };

    function LiquidCrystal(width, height) {
      this.width = width;
      this.height = height;
      repeat(this.width * this.height, this, function(index) {
        var key, x, y;
        x = index % this.width;
        y = index / this.width >> 0;
        key = getKey(x, y);
        return pixels[key] = new Pixel(x, y);
      });
    }

    LiquidCrystal.prototype.mount = function(parent) {
      var fragment;
      fragment = document.createDocumentFragment();
      each(pixels, function(pixel) {
        return fragment.appendChild(pixel.el);
      });
      return parent.appendChild(fragment);
    };

    LiquidCrystal.prototype.clear = function() {
      each(active_pixels, function(pixel) {
        return pixel.active(false);
      });
      active_pixels = {};
      return true;
    };

    LiquidCrystal.prototype.setPixel = function(x, y) {
      var key;
      key = getKey(x, y);
      if (key in pixels && !pixels[key].isActive()) {
        pixels[key].active(true);
        if (pixels[key].isActive()) {
          active_pixels[key] = pixels[key];
          return true;
        }
      }
      return false;
    };

    return LiquidCrystal;

  })();

  window.LiquidCrystal = LiquidCrystal;

}).call(this);
(function() {
  var display;

  display = new Display(el.get("#canvas"), 80, 16);

  display.addSymbol("A", 5, "22a318fe31");

  display.addSymbol("B", 5, "f463e8c63e");

  display.printSymbol("A");

  display.setCursor(5, 0);

  display.printSymbol("B");

  window.display = display;

}).call(this);
